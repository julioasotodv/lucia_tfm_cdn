importScripts("https://cdn.jsdelivr.net/pyodide/v0.27.2/full/pyodide.js");

function sendPatch(patch, buffers, msg_id) {
  self.postMessage({
    type: 'patch',
    patch: patch,
    buffers: buffers
  })
}

async function startApplication() {
  console.log("Loading pyodide!");
  self.postMessage({type: 'status', msg: 'Loading pyodide'})
  self.pyodide = await loadPyodide();
  self.pyodide.globals.set("sendPatch", sendPatch);
  console.log("Loaded!");
  await self.pyodide.loadPackage("micropip");
  const env_spec = ['https://cdn.holoviz.org/panel/wheels/bokeh-3.6.3-py3-none-any.whl', 'https://cdn.holoviz.org/panel/1.6.1/dist/wheels/panel-1.6.1-py3-none-any.whl', 'pyodide-http==0.2.1', 'param==2.2.0', 'https://julioasotodv.github.io/webllm_test/pdfplumber-0.11.6-py3-none-any.whl', 'reportlab==4.4.1', 'pygments==2.19.1']
  for (const pkg of env_spec) {
    let pkg_name;
    if (pkg.endsWith('.whl')) {
      pkg_name = pkg.split('/').slice(-1)[0].split('-')[0]
    } else {
      pkg_name = pkg
    }
    self.postMessage({type: 'status', msg: `Installing ${pkg_name}`})
    try {
      await self.pyodide.runPythonAsync(`
        import micropip
        await micropip.install('${pkg}');
      `);
    } catch(e) {
      console.log(e)
      self.postMessage({
	type: 'status',
	msg: `Error while installing ${pkg_name}`
      });
    }
  }
  console.log("Packages loaded!");
  self.postMessage({type: 'status', msg: 'Executing code'})
  const code = `
  \nimport asyncio\n\nfrom panel.io.pyodide import init_doc, write_doc\n\ninit_doc()\n\nimport asyncio\nimport io\nimport panel as pn\nimport param\nfrom panel.custom import JSComponent, ESMEvent\nimport pdfplumber\nimport re\nfrom io import BytesIO\nfrom json import loads\nfrom panel.widgets import FileDownload\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import A4\n\n# Activamos panel\npn.extension()\n\n############################################################################################################\n\ndef anonimizar_texto_pdf_en_memoria(archivo_pdf):\n    texto_paginas = []\n    with pdfplumber.open(BytesIO(archivo_pdf)) as pdf:\n        num_paginas = len(pdf.pages)\n\n        for i, page in enumerate(pdf.pages):\n            lineas = page.extract_text().split("\\n")\n\n            # Eliminar desde l\xednea 2 hasta encontrar "TEL:"\n            nuevas_lineas = []\n            eliminar = False\n            for j, linea in enumerate(lineas, start=1):\n                if j == 2:\n                    eliminar = True\n                if "TEL:" in linea:\n                    eliminar = False\n                    continue\n                if not eliminar:\n                    nuevas_lineas.append(linea)\n\n            # Filtros de contenido\n            nuevas_lineas = [\n                linea for linea in nuevas_lineas\n                if "Fecha de Nacimiento" not in linea\n                and "FECHA INTERVENCI\xd3N:" not in linea\n                and "Madrid," not in linea\n            ]\n\n            if i == 0:\n                nuevas_lineas = [\n                    linea for j, linea in enumerate(nuevas_lineas, start=1)\n                    if j not in [6, 9, 10]\n                ]\n\n            if len(nuevas_lineas) > 11:\n                nuevas_lineas = nuevas_lineas[:-11]\n\n            if i in [num_paginas - 1, num_paginas - 2]:\n                for idx, linea in enumerate(nuevas_lineas):\n                    if "FDO." in linea:\n                        nuevas_lineas = nuevas_lineas[:idx]\n                        break\n\n            texto_paginas.append("\\n".join(nuevas_lineas))\n            \n    return "\\n\\n".join(texto_paginas)\n\n###############################################################################################################\n\ndef extraer_info_clinica(texto):\n    resultados = {}\n\n    # Buscar entre "Esp./Serv.:" y "Tipo de Ingreso:"\n    match_servicio = re.search(r"Esp\\./Serv\\.:([\\s\\S]*?)Tipo de Ingreso:", texto)\n    if match_servicio:\n        resultados["ESPECIALIDAD / SERVICIO DE"] = match_servicio.group(1).strip()\n\n    # Buscar entre "Edad:" y "Sexo:"\n    match_edad = re.search(r"Edad:([\\s\\S]*?)Sexo:", texto)\n    if match_edad:\n        resultados["EDAD"] = match_edad.group(1).strip()\n\n    # Buscar entre "Sexo:" y "Motivo de Alta:"\n    match_sexo = re.search(r"Sexo:([\\s\\S]*?)Motivo de Alta:", texto)\n    if match_sexo:\n        resultados["SEXO"] = match_sexo.group(1).strip()\n\n    return resultados\n\n#######################################################################################################################\n\n\ndef extraer_evolucion(texto):\n    marcador1 = "Evoluci\xf3n postquir\xfargica:"\n    marcador2 = "Diagn\xf3stico principal :"\n\n    idx_inicio = texto.find(marcador1)\n    idx_fin = texto.find(marcador2)\n\n    if idx_inicio != -1 and idx_fin != -1 and idx_inicio < idx_fin:\n        return texto[idx_inicio + len(marcador1):idx_fin].strip()\n\n    if idx_inicio == -1:\n        alt_inicio = "Evoluci\xf3n y comentarios:"\n        alt_fin = "Intervenci\xf3n:"\n        idx_alt_inicio = texto.find(alt_inicio)\n        idx_alt_fin = texto.find(alt_fin)\n\n        if idx_alt_inicio != -1 and idx_alt_fin != -1 and idx_alt_inicio < idx_alt_fin:\n            fragmento_alt = texto[idx_alt_inicio + len(alt_inicio):idx_alt_fin].strip()\n            if fragmento_alt and any(c.isalpha() for c in fragmento_alt):\n                return f"Evoluci\xf3n alternativa encontrada:\\n{fragmento_alt.strip()}"\n            else:\n                return "Se asigna CCI = 0 a falta de informaci\xf3n sobre cualquier tipo de evoluci\xf3n del paciente"\n\n        elif idx_alt_inicio != -1 and idx_fin != -1 and idx_alt_inicio < idx_fin:\n            fragmento_final = texto[idx_alt_inicio + len(alt_inicio):idx_fin].strip()\n            if fragmento_final and any(c.isalpha() for c in fragmento_final):\n                return f"Evoluci\xf3n extra\xedda entre 'Evoluci\xf3n y comentarios:' y 'Diagn\xf3stico principal :':\\n{fragmento_final.strip()}"\n            else:\n                return "Se asigna CCI = 0 a falta de informaci\xf3n sobre cualquier tipo de evoluci\xf3n del paciente"\n\n        else:\n            return "No se encontr\xf3 evoluci\xf3n v\xe1lida. Se asigna CCI = 0."\n\n    elif idx_fin == -1:\n        return "No se encontr\xf3 la secci\xf3n 'Diagn\xf3stico principal :'."\n\n    elif idx_inicio > idx_fin:\n        return "Orden incorrecto de secciones."\n\n#######################################################################################################################\n\ndef generar_prompt(resultado):\n    """\n    Genera una lista de grados Clavien-Dindo a partir del texto extra\xeddo de un informe m\xe9dico.\n\n    Esta funci\xf3n construye un prompt detallado con el texto proporcionado, lo env\xeda al modelo \n    de lenguaje para identificar complicaciones postoperatorias y su gravedad seg\xfan la \n    clasificaci\xf3n de Clavien-Dindo. Extrae el JSON resultante y devuelve los grados en forma de lista.\n\n    Par\xe1metros:\n        resultado (str): Texto extra\xeddo del informe cl\xednico que describe la evoluci\xf3n postoperatoria.\n\n    Devuelve:\n        lista_CCI (list): Lista de grados Clavien-Dindo (por ejemplo: ['II', 'IIIb']).\n    """\n\n\n\n    inicio_system_prompt = (\n        "Eres un experto en medicina. Siempre vas a ser educado y estar dispuesto a ayudar. Tu objetivo es que a partir de un informe de alta "\n        "hospitalaria que te es compartido, has de listar las complicaciones y el grado asociado seg\xfan la clasificaci\xf3n Clavien-Dindo."\n    )\n\n    tabla = (\n        "La clasificaci\xf3n de Clavien-Dindo en la que te debes basar es la siguiente:\\n"\n        "I: Cualquier desviaci\xf3n del curso postoperatorio normal, sin la necesidad de tratamiento farmacol\xf3gico o intervenciones "\n        "quir\xfargicas, endosc\xf3picas y radiol\xf3gicas. Incluye antiem\xe9ticos, antipir\xe9ticos, analg\xe9sicos, diur\xe9ticos y electrolitos y "\n        "la fisioterapia. Tambi\xe9n incluye las infecciones de la herida abierta\\n"\n        "II: Requiere tratamiento farmacol\xf3gico con medicamentos distintos de los autorizados para las complicaciones de grado I. Tambi\xe9n "\n        "se incluyen las transfusiones de sangre y la nutrici\xf3n parenteral total\\n"\n        "IIIa: Requiere intervenci\xf3n quir\xfargica, endosc\xf3pica o radiol\xf3gico: Intervenci\xf3n que no se da bajo anestesia general\\n"\n        "IIIb: Requiere intervenci\xf3n quir\xfargica, endosc\xf3pica o radiol\xf3gico: Intervenci\xf3n bajo anestesia general\\n"\n        "IVa: Complicaci\xf3n potencialmente mortal [...] Disfunci\xf3n de un solo \xf3rgano\\n"\n        "IVb: Complicaci\xf3n potencialmente mortal [...] Disfunci\xf3n multiorg\xe1nico\\n"\n        "V: Muerte de un paciente."\n    )\n\n    prompt_informe = f"El informe del paciente se muestra a continuaci\xf3n: \\n<informe>{resultado}</informe>\\n"\n\n    fin_system_prompt = (\n        "Identifica cada complicaci\xf3n y categor\xedzala en base a la clasificaci\xf3n Claiven-Dindo. NO debes detallar de nuevo la descripci\xf3n y definici\xf3n de cada grado (I, II etc). "\n        "\xdanicamente debes detallar pares en el formato Complicaci\xf3n -> grado al que pertenece, adicionalmente con un breve comentario que explique el razonamiento. Por ejemplo: "\n        "Hemorragia cerebral -> IVa, ya que es una complicaci\xf3n potencialmente mortal. "\n        "Si m\xe1s de un medicamento est\xe1 destinado para un mismo sistema, solo se contabiliza un grado II. Si tenemos varios medicamentos destinados "\n        "a diferentes sistemas, se contabilizan dos grados II. "\n        "Si no existe ninguna complicaci\xf3n, no debes de detallar ninguna."\n        "Debes terminar la respuesta con un JSON que liste y resuma todas las complicaciones identificadas, y debe seguir el formato de bloque de c\xf3digo Markdown "\n        "\`\`\`json {\\"Nombre complicaci\xf3n\\": \\"grado en n\xfameros romanos\\"} \`\`\`. "\n        "Muestra tu razonamiento antes de generar el JSON. Si no hay ninguna complicaci\xf3n, genera un JSON vac\xedo."\n    )\n\n    system_prompt = inicio_system_prompt + "\\n" + tabla + "\\n" + prompt_informe + " " + fin_system_prompt\n\n    #messages = [{"role": "user", "content": system_prompt}]\n\n    \n    return system_prompt\n\n\n#######################################################################################################################\n\n\ndef procesar_json(respuesta_modelo):\n    \n    respuesta_modelo_limpia = respuesta_modelo.strip()\n\n    string_separado_por_comillas = respuesta_modelo_limpia.split("\`\`\`")\n\n    if len(string_separado_por_comillas) < 2:\n        resumen_content = "{}"        \n    else:\n        resumen_content = string_separado_por_comillas[1].replace("json", "")\n\n    json_resultado = loads(resumen_content)\n    lista_CCI = json_resultado.values()\n\n    return lista_CCI\n\n\n#######################################################################################################################\n\n\ndef calcular_cci(complicaciones):\n    """\n    Calcula el Comprehensive Complication Index (CCI) basado en los valores de complicaciones.\n    \n    Argumentos\n        complicaciones (list): Lista de grados de complicaci\xf3n \n    \n    Returns:\n        float: Valor del CCI calculado.\n    """\n\n    valores_complicacion = {\n        "I": 300,\n        "II": 1750,\n        "IIIa":2750,\n        "IIIb":4550,\n        "IVa":7200,\n        "IVb":8550,\n        "V": 100\n    }\n\n\n    if len(complicaciones) == 0:\n        return 0.0\n        \n    # Si hay una complicaci\xf3n grado V, se asigna directamente CCI = 100\n    if "V" in complicaciones:\n        return 100.0\n\n    # Obtener los valores correspondientes a las complicaciones\n    #valores_sumados = sum(valores_complicacion[grado] for grado in complicaciones if grado in valores_complicacion)\n    valores_sumados = 0  # Inicializamos la suma en 0\n\n    # Recorremos cada grado de complicaci\xf3n en la lista\n    for grado in complicaciones:\n        if grado in valores_complicacion:  # Verificamos que el grado existe en el diccionario\n            valores_sumados += valores_complicacion[grado]\n\n    # Aplicammos la f\xf3rmula del CCI\n    raiz_suma = valores_sumados ** 0.5\n    cci = round(raiz_suma / 2, 1)\n\n    # Si el resultado es mayor a 99.9, se deja en 99.9\n    if cci > 99.9:\n        return 99.9\n\n    # Si no hay complicaciones, el CCI es NULL \n    if cci == 0:\n        return None\n\n    return cci\n    \n\n#######################################################################################################################\n\n\ndef rellenar_campos_y_modelo(*eventos):\n    for evento in eventos:\n        if evento.name == "value":\n            if boton_subir_pdf.value is not None:\n\n                campo_final.object = "## "\n\n                informe_anonimizado = anonimizar_texto_pdf_en_memoria(boton_subir_pdf.value)\n                global texto_anonimizado_actual\n                texto_anonimizado_actual = informe_anonimizado\n\n                extraer_campos = extraer_info_clinica(informe_anonimizado)\n\n                extraer_evolucion_post = extraer_evolucion(informe_anonimizado)\n\n               # campo_edad.object = "EDAD: " + extraer_campos["EDAD"] \n              #  campo_sexo.object = "SEXO: " + extraer_campos["SEXO"]\n                #campo_especialidad.object = "ESPECIALIDAD / SERVICIO DE: " + extraer_campos["ESPECIALIDAD / SERVICIO DE"]\n                \n               # campo_evolucion.object = "EVOLUCI\xd3N POSTQUIR\xdaRGICA: " + extraer_evolucion_post\n\n\n\n    \n                campo_edad.object = f"**EDAD:** {extraer_campos['EDAD']}"\n                campo_sexo.object = f"**SEXO:** {extraer_campos['SEXO']}"\n                campo_especialidad.object = f"**ESPECIALIDAD / SERVICIO DE:** {extraer_campos['ESPECIALIDAD / SERVICIO DE']}"\n                campo_evolucion.object = f"**EVOLUCI\xd3N POSTQUIR\xdaRGICA:** {extraer_evolucion_post}"\n                \n\n\n                #A\xf1adimos respuesta del modelo\n                chat_feed.clear()\n                prompt = generar_prompt(extraer_evolucion_post)\n                prompt_message = pn.chat.ChatMessage(prompt, visible=False)\n                chat_feed.send(prompt_message, respond=True)\n\n              \n                \n#######################################################################################################################\n\nclass WebLLMPanelComponent(JSComponent):\n    """Esto realmente no es visible en la app,\n    pero es el mecanismo que permite ejecutar el\n    modelo en el propio navegador; usando la biblioteca\n    de Javascript WebLLM. Esta es la parte m\xe1s \n    intrincada de lejos; un d\xeda podemos tirarnos dos horas\n    entendi\xe9ndola juntos. Realmente tampoco es tan relevante,\n    pero es la parte que hace la "magia" de combinar Javascript\n    con Python :)\n    """\n\n    loaded = param.Boolean(default=False, doc="""\n        Whether the model is loaded.""")\n\n    history = param.Integer(default=3)\n\n    status = param.Dict(default={'text': '', 'progress': 0})\n\n    running = param.Boolean(default=False, doc="""\n        Whether the LLM is currently running.""")\n    \n    temperature = param.Number(default=1, bounds=(0, 2), doc="""\n        Temperature of the model completions.""")\n\n    _esm = """\n    import * as webllm from "https://esm.run/@mlc-ai/web-llm@0.2.78";\n\n    export async function render({ model }) {\n\n        const initProgressCallback = (status) => {\n              model.status = status\n            }\n\n        const engine = await webllm.CreateMLCEngine(    \n                    //"gemma-2-9b-it-q4f16_1-MLC",\n                    "Qwen2.5-7B-Instruct-q4f16_1-MLC", // Ojito al Qwen 2.5 porque es peque\xf1o pero mat\xf3n!\n                                                       // Subjetivamente le veo m\xe1s fuerte que a Gemma 2 de 9B creo...\n                    //"Llama-3.1-8B-Instruct-q4f16_1-MLC",\n                   {initProgressCallback}\n                )\n\n        model.loaded = true;\n        model.on("msg:custom", async (event) => {\n\n    if (event.type === 'completion') {\n\n    const chunks = await engine.chat.completions.create({\n        messages: event.messages,\n        temperature: 0,\n        top_p: 1.0,\n        stream: true, // <-- Enable streaming\n        //stream_options: { include_usage: true },\n    });\n\n    model.running = true\n\n    for await (const chunk of chunks) {\n        if (!model.running) {\n              break\n            }\n         model.send_msg(chunk.choices[0])\n         }\n        }\n    })\n     }\n    """\n\n    def __init__(self, **params):\n        super().__init__(**params)\n        self.loading = True\n        self._buffer = []\n\n    @param.depends('loaded', watch=True)\n    def _loaded(self):\n        self.loading = False\n\n    def _handle_msg(self, msg):\n        if self.running:\n            self._buffer.insert(0, msg)\n\n    async def create_completion(self, msgs):\n        self._send_msg({'type': 'completion', 'messages': msgs})\n        latest = None\n        while True:\n            await asyncio.sleep(0.01)\n            if not self._buffer:\n                continue\n            choice = self._buffer.pop()\n            yield choice\n            reason = choice['finish_reason']\n            if reason == 'error':\n                raise RuntimeError('Model not loaded')\n            elif reason:\n                return\n\n    async def callback(self, contents: str, user: str):\n        if not self.loaded:\n            if self.loading:\n                yield pn.pane.Markdown(\n                    f'## \`model\`\\n\\n' + self.param.status.rx()['text']\n                )\n            else:\n                yield 'Load the model'\n            return\n        self.running = False\n        self._buffer.clear()\n        message = ""\n        async for chunk in self.create_completion([{'role': 'user', 'content': contents}]):\n            message += chunk['delta'].get('content', '')\n            yield message\n\n        # Leer la respuesta del modelo una vez termina su respuesta,\n        # procesar el JSON para convertirlo en diccionario de Python\n        # y aplicar la funci\xf3n de c\xe1lculo del CCI:\n        respuesta_modelo = chat_feed.objects[-1].object\n        diccionario_complicaciones = procesar_json(respuesta_modelo)\n        cci_final = calcular_cci(diccionario_complicaciones)\n        if cci_final > 50:\n            campo_final.styles = {"color": "#ad020b"}\n        else:\n            campo_final.styles = {"color": "#198754"}\n    \n        campo_final.object = "## CCI estimado: %.2f" % cci_final\n\n\n    def menu(self):\n        status = self.param.status.rx()\n        return pn.Column(\n            #pn.widgets.FloatSlider.from_param(self.param.temperature, sizing_mode='stretch_width'),\n            #pn.indicators.Progress(\n            #    value=(status['progress']*100).rx.pipe(int), visible=self.param.loading,\n            #    sizing_mode='stretch_width'\n            #),\n            pn.pane.Markdown(status['text']),\n            visible=self.param.loading\n        )\n\n\n#######################################################################################################################\n\ndef activar_boton_pdf(*events):\n    for event in events:\n        if event.name == "loaded" and event.new == True:\n            boton_subir_pdf.disabled = False\n\n\n#######################################################################################################################\n\ntexto_anonimizado_actual = ""\nnombre_archivo_original = "informe"\n\n# El modelo:\nllm = WebLLMPanelComponent()\n\nllm.param.watch(activar_boton_pdf, 'loaded')\n\n# Crear bot\xf3n de subir documento:\nboton_subir_pdf = pn.widgets.FileInput(accept=".pdf", disabled=True)\n\ncampo_edad = pn.pane.Markdown("**EDAD:**", styles={\n    'background': '#F2F2F2',\n    'padding': '1px 8px',\n    'line-height': '1',\n    'border-radius': '5px',\n    'font-family': 'Montserrat, sans-serif',\n    'font-size': '11px',\n    'text-align': 'center'\n})\n\ncampo_sexo = pn.pane.Markdown("**SEXO:**", styles={\n    'background': '#F2F2F2',\n    'padding': '1px 8px',\n    'line-height': '1',\n    'border-radius': '5px',\n    'font-family': 'Montserrat, sans-serif',\n    'font-size': '11px'\n})\n\ncampo_especialidad = pn.pane.Markdown("**ESPECIALIDAD:**", styles={\n    'background': '#F2F2F2',\n    'padding': '1px 8px',\n    'line-height': '1',\n    'border-radius': '5px',\n    'font-family': 'Montserrat, sans-serif',\n    'font-size': '11px'\n})\n\ncampo_evolucion = pn.pane.Markdown("**EVOLUCI\xd3N POSTQUIR\xdaRGICA:**", styles={\n    'background': '#F2F2F2',\n    'padding': '1px 8px',\n    'line-height': '1',\n    'border-radius': '5px',\n    'font-family': 'Montserrat, sans-serif',\n    'font-size': '11px'\n})\n\n\nchat_feed = pn.chat.ChatFeed(callback=llm.callback, height=400)\ncampo_final = pn.pane.Markdown("## ", align="center", margin=(20, 10, 5, 10))\n\n# Cada vez que cambie el valor del bot\xf3n, ejecuta la funci\xf3n que le hemos indicado\nboton_subir_pdf.param.watch(rellenar_campos_y_modelo, "value")\n\n#with open("logo.txt", "r") as archivo_logo:\n    #string_logo = archivo_logo.read()\n\n\n\n# BARRA SUPERIOR Y TODO LO QUE LLEVA DENTRO\n#######################################################################################################################\n\n\n# Plantilla Bootstrap sin t\xedtulo predefinido\ntemplate = pn.template.BootstrapTemplate(\n    title="",  # Quitamos el t\xedtulo que va centrado por defecto\n    #logo="https://www.22q.es/media/files/94_lapaz.png",\n    header_background="white",\n    header_color="#3491DF",\n)\n\n# Altura de la barra superior\ntemplate.header_height = 90\n\n# Estilo del logo (m\xe1s grande y alineado)\npn.config.raw_css.append("""\n\np {\n    margin-top: 1em !important;\n    margin-bottom: 1em !important;\n}\n\n.pn-header .navbar-brand img {\n    height: 65px !important;\n    margin-left: 15px;\n}\n\n.pn-header {\n    margin-bottom: 0px !important;\n}\n\n.pn-main {\n    padding-top: 0px !important;\n}\n\n.sombra-imagen {\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.15);\n    margin-bottom: 20px;\n}\n\n\n\n\n\n.bk-tabs-header {\n    background-color: transparent !important;\n    border-bottom: 1px solid #ccc;\n    padding-left: 0;\n    margin-left: 0;\n    margin-bottom: 10px;\n}\n\n.bk-tab {\n    font-family: 'Montserrat', sans-serif;\n    font-size: 16px;\n    font-weight: 600;\n    color: #0074A3 !important;\n    background: transparent !important;\n    border: none !important;\n    padding: 10px 20px;\n    border-bottom: 2px solid transparent;\n    transition: border-color 0.2s ease;\n}\n\n.bk-tab:hover {\n    cursor: pointer;\n    border-bottom: 2px solid #82bdd2 !important; /* un azul m\xe1s claro al pasar */\n}\n\n.bk-tab.bk-active {\n    border-bottom: 3px solid #0074A3 !important;\n    color: #0074A3 !important;\n}\n                         \ninput.bk-input{\n    background-color: transparent !important;\n}\n\n.bk-input[disabled]{\n    opacity: 0.5 !important;\n}\n\n\n\n\n.boton-descarga button {\n    background-color: #AD020B !important;\n    color: white !important;\n    font-weight: 600;\n    font-family: 'Montserrat', sans-serif;\n    font-size: 14px;\n    border: none;\n    border-radius: 6px;\n    padding: 10px 24px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);\n    transition: background-color 0.2s ease;\n}\n\n.boton-descarga button:hover {\n    background-color: #8c0108 !important;\n}\n\npre code {\n    color: rgb(214, 51, 132) !important;\n}\n\n""")\n\n\n\n\n# T\xedtulo como Markdown (a la derecha)\ntitulo_header = pn.pane.Markdown(\n    "### Asistente Cl\xednico por IA",\n    styles={\n        'margin': '20px 20px 0px auto',\n        'color': '#0074A3',\n        'font-family': 'Montserrat, sans-serif',\n        'font-weight': '600',\n        'text-align': 'right'\n    }\n)\n\n# Colocamos el logo (izquierda) y t\xedtulo (derecha) en el header\ntemplate.header[:] = [\n    pn.Row(\n        pn.Spacer(width=5),\n        #pn.pane.PNG("https://www.22q.es/media/files/94_lapaz.png", height=55),\n        pn.pane.PNG("https://julioasotodv.github.io/lucia_tfm_cdn/both_logos.png", height=55), \n        #pn.pane.PNG("https://masterenfermocritico.ub.edu/img/logo-hospital-la-paz.webp", height=60),\n        pn.Spacer(),  # expansivo: empuja el t\xedtulo hacia la derecha\n        titulo_header,\n        sizing_mode='stretch_width'\n    )\n]\n\n\n#######################################################################################################################\n\n\n\nimagen_header = pn.pane.HTML(\n    """\n    <div style="width: 100%; height: 220px; overflow: hidden;">\n        <img src="https://media.istockphoto.com/id/1437830105/es/foto/toma-recortada-de-una-enfermera-sostiene-la-mano-de-su-paciente-mayor-dar-apoyo-m%C3%A9dico-que.jpg?s=612x612&w=0&k=20&c=257Vp085gp-U9b-h-HeQFYRo0ecLhmFVtxWRCVUdPfg=" \n             style="width: 100%; height: 100%; object-fit: cover; display: block;" />\n    </div>\n    """,\n    css_classes=["sombra-imagen"], \n    sizing_mode="stretch_width"\n)\n\n#######################################################################################################################\n\n\n\n# Agrupar elementos visualmente con tarjetas\nseccion_subida = pn.Card(\n    boton_subir_pdf,\n    title="Subir informe PDF",\n    collapsible=False,\n    header_background = "#AD020B",\n    header_color = "white",\n    styles={'font-family': 'Montserrat, sans-serif'}\n)\n\nseccion_info = pn.Card(\n    pn.Row(\n        pn.Column(campo_edad, width=300),\n        pn.Column(campo_sexo, width=300)\n    ),\n    pn.Column(campo_especialidad),\n    pn.Column(campo_evolucion),\n    title="Datos extra\xeddos del informe",\n    collapsible=False,\n    header_background = "#0074A3",\n    header_color = "white",\n    styles={'font-family': 'Montserrat, sans-serif'}\n)\n\nseccion_chat = pn.Card(\n    llm.menu(),\n    llm,\n    chat_feed,\n        title="""\n        Asistente cl\xednico \n        <span title="Este asistente analiza autom\xe1ticamente el informe cl\xednico subido para identificar posibles complicaciones postquir\xfargicas mediante IA."\n              style="display:inline-block; background:#ffffff20; color:white; font-weight:bold; \n                     border-radius:50%; padding:2px 7px; margin-left:8px; font-family:Montserrat; cursor:help;">\n          ?\n        </span>\n    """,\n    #title="Asistente cl\xednico",\n    collapsible=False,\n    header_background = "#0074A3",\n    header_color = "white",\n    styles={'font-family': 'Montserrat, sans-serif'}\n)\n\n\n\n#######################################################################################################################\ntexto_cci = pn.pane.Markdown(\n    """\n**\xbfQu\xe9 es el CCI?**\n\nEl *Comprehensive Complication Index* (CCI) es un \xedndice que resume todas las complicaciones postoperatorias en un \xfanico valor num\xe9rico entre 0 y 100. Se calcula a partir de los grados de Clavien-Dindo, ponderando su gravedad.\n\n- 0 \u2192 Sin complicaciones\n- 100 \u2192 Muerte del paciente\n\nSe usa para evaluar de forma objetiva la calidad del postoperatorio.\n    """,\n    \n    styles={\n        'background': '#F2F2F2',\n        'padding': '10px',\n        'border-radius': '5px',\n        'font-size': '15px',\n        'font-family': 'Montserrat, sans-serif'\n    }\n)\n\n\n#######################################################################################################################\n\ntexto_datos = pn.pane.Markdown(\n    """\n**Tratamiento de datos personales y confidencialidad**\n\nEste proyecto cumple con el Reglamento General de Protecci\xf3n de Datos (UE) 2016/679 y la Ley Org\xe1nica 3/2018 de Protecci\xf3n de Datos Personales, garantizando la privacidad y seguridad de la informaci\xf3n cl\xednica. Los informes m\xe9dicos ser\xe1n **anonimizados** siguiendo las directrices de la Agencia Espa\xf1ola de Protecci\xf3n de Datos (AEPD), de forma que no sea posible identificar a los pacientes, ni directa ni indirectamente.\n\nSe adoptar\xe1n medidas t\xe9cnicas adecuadas para proteger los datos durante todo el proceso de an\xe1lisis, minimizando cualquier riesgo de reidentificaci\xf3n. Asimismo, se seguir\xe1 el **C\xf3digo Deontol\xf3gico M\xe9dico**, asegurando que el uso de herramientas de Inteligencia Artificial se limite a facilitar la toma de decisiones, sin sustituir el juicio cl\xednico.\n\nEl sistema se alinea con los principios de **transparencia, trazabilidad y explicabilidad**, permitiendo a los profesionales comprender c\xf3mo se generan los resultados y garantizando una implementaci\xf3n \xe9tica y segura de la IA en salud.\n    """,\n    styles={\n        'background': '#F2F2F2',\n        'padding': '12px',\n        'border-radius': '6px',\n        'font-size': '15px',\n        'font-family': 'Montserrat, sans-serif'\n    }\n)\n\n\n\n\n\n#######################################################################################################################\n\ntexto_clavien = pn.pane.HTML(\n    """\n    <div style="background: #F2F2F2; padding: 18px; border-radius: 8px; font-family: 'Montserrat', sans-serif; font-size: 15px;">\n        <h4 style="color: black; font-weight: 600; font-size: 16px; margin-top: 0; margin-bottom: 12px;">\n            Clasificaci\xf3n de Clavien-Dindo de las complicaciones quir\xfargicas\n        </h4>\n        <table style="width: 100%; border-collapse: collapse; border: 1px solid #bbb; background-color: white;">\n            <thead style="background-color: #e0e0e0;">\n                <tr>\n                    <th style="text-align: left; padding: 8px; border: 1px solid #bbb;">Grados</th>\n                    <th style="text-align: left; padding: 8px; border: 1px solid #bbb;">Definiciones</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td style="padding: 8px; font-weight: bold; border: 1px solid #bbb;">I</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">\n                        Cualquier desviaci\xf3n del curso postoperatorio normal, sin necesidad de tratamiento farmacol\xf3gico o intervenciones quir\xfargicas, endosc\xf3picas o radiol\xf3gicas. Incluye antiem\xe9ticos, antipir\xe9ticos, analg\xe9sicos, diur\xe9ticos, electrolitos y fisioterapia. Tambi\xe9n incluye infecciones de la herida abierta.\n                    </td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; font-weight: bold; border: 1px solid #bbb;">II</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">\n                        Requiere tratamiento farmacol\xf3gico con medicamentos distintos a los permitidos para el grado I. Se incluyen transfusiones de sangre y nutrici\xf3n parenteral total.\n                    </td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; font-weight: bold; border: 1px solid #bbb;">III</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">Requiere intervenci\xf3n quir\xfargica, endosc\xf3pica o radiol\xf3gica.</td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; padding-left: 20px; border: 1px solid #bbb;">- IIIa</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">Intervenci\xf3n sin anestesia general.</td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; padding-left: 20px; border: 1px solid #bbb;">- IIIb</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">Intervenci\xf3n bajo anestesia general.</td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; font-weight: bold; border: 1px solid #bbb;">IV</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">\n                        Complicaci\xf3n potencialmente mortal (ej. hemorragia cerebral, infarto cerebral) que requiere manejo en UCI (incluye sistema nervioso central).\n                    </td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; padding-left: 20px; border: 1px solid #bbb;">- IVa</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">Disfunci\xf3n de un solo \xf3rgano (incluyendo di\xe1lisis).</td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; padding-left: 20px; border: 1px solid #bbb;">- IVb</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">Disfunci\xf3n multiorg\xe1nica.</td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; font-weight: bold; border: 1px solid #bbb;">V</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">Muerte del paciente.</td>\n                </tr>\n                <tr>\n                    <td style="padding: 8px; font-weight: bold; border: 1px solid #bbb;">Sufijo "d"</td>\n                    <td style="padding: 8px; border: 1px solid #bbb;">Se a\xf1ade si al alta el paciente presenta discapacidad y requiere seguimiento posterior.</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    """,\n    sizing_mode="stretch_width"\n)\n\n\n#######################################################################################################################\n\n\n\n\n\ntabs_info_adicional = pn.Tabs(\n    ("\xbfQu\xe9 es el CCI?", texto_cci),\n    ("Clasificaci\xf3n Clavien-Dindo", texto_clavien),\n    ("Tratamiento de datos", texto_datos),\n    sizing_mode="stretch_width",\n    dynamic=True,\n    styles={'font-family': 'Montserrat, sans-serif'}\n)\n\n\n\n#######################################################################################################################\n\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import A4\n\ndef generar_pdf():\n    buffer = io.BytesIO()\n    c = canvas.Canvas(buffer, pagesize=A4)\n\n    texto = texto_anonimizado_actual.split("\\n")  # texto que ya tienes globalmente\n    ancho, alto = A4\n    y = alto - 50  # margen superior\n\n    for linea in texto:\n        if y < 50:\n            c.showPage()\n            y = alto - 50\n        c.drawString(40, y, linea[:120])  # l\xedmite de caracteres por l\xednea\n        y -= 15\n\n    c.save()\n    buffer.seek(0)\n    return buffer\n\n\nboton_descargar_txt = pn.widgets.FileDownload(\n    label="🡇 Descargar el informe anonimizado",\n    filename="informe_anonimizado.pdf",  # extensi\xf3n en PDF\n    button_type="default",\n    css_classes=["boton-descarga"],\n    callback=generar_pdf,\n    align="center"\n)\n\n\n#######################################################################################################################\n\n\n\n\n\n\nseccion_final = pn.Card(\n    campo_final, \n    boton_descargar_txt,\n    title="Resultado final",\n    collapsible=False,\n    styles={'font-family': 'Montserrat, sans-serif'},\n    sizing_mode="stretch_width"\n)\n\n\n\nespaciador = pn.Spacer(height=10)\n\nespaciador2 = pn.Spacer(height=10)\n\n# Layout principal ordenado\ncontenido = pn.Column(imagen_header,\n    espaciador,\n    tabs_info_adicional,\n    espaciador2,\n    seccion_subida,\n    seccion_info,\n    seccion_chat,\n    seccion_final\n)\n\n# Insertar en la plantilla\ntemplate.main.extend([\n    contenido,\n    pn.Spacer(height=20)\n])\n\n\n# Mostrar app\ntemplate.servable(title="Asistente Cl\xednico por IA")\n\n#AD020B\n\n\n\n\n\n\nawait write_doc()
  `

  try {
    const [docs_json, render_items, root_ids] = await self.pyodide.runPythonAsync(code)
    self.postMessage({
      type: 'render',
      docs_json: docs_json,
      render_items: render_items,
      root_ids: root_ids
    })
  } catch(e) {
    const traceback = `${e}`
    const tblines = traceback.split('\n')
    self.postMessage({
      type: 'status',
      msg: tblines[tblines.length-2]
    });
    throw e
  }
}

self.onmessage = async (event) => {
  const msg = event.data
  if (msg.type === 'rendered') {
    self.pyodide.runPythonAsync(`
    from panel.io.state import state
    from panel.io.pyodide import _link_docs_worker

    _link_docs_worker(state.curdoc, sendPatch, setter='js')
    `)
  } else if (msg.type === 'patch') {
    self.pyodide.globals.set('patch', msg.patch)
    self.pyodide.runPythonAsync(`
    from panel.io.pyodide import _convert_json_patch
    state.curdoc.apply_json_patch(_convert_json_patch(patch), setter='js')
    `)
    self.postMessage({type: 'idle'})
  } else if (msg.type === 'location') {
    self.pyodide.globals.set('location', msg.location)
    self.pyodide.runPythonAsync(`
    import json
    from panel.io.state import state
    from panel.util import edit_readonly
    if state.location:
        loc_data = json.loads(location)
        with edit_readonly(state.location):
            state.location.param.update({
                k: v for k, v in loc_data.items() if k in state.location.param
            })
    `)
  }
}

startApplication()